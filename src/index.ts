import { ActionSchema, FIFOStrategy, MicroRollup } from "@stackr/stackr-js";
import bodyParser from "body-parser";
import express, { Request, Response } from "express";
import { stackrConfig } from "../stackr.config";
import { OTPRollup, otpSTF } from "./state";
import { StateMachine } from "@stackr/stackr-js/execution";
import  seedrandom from 'seedrandom';
import * as crypto from 'crypto';
import cors from 'cors';

// this file is generated by the deployment script
import * as genesisState from "../genesis-state.json";







const rollup = async () => {
  const counterFsm = new StateMachine({
    state: new OTPRollup(genesisState.state),
    stf: otpSTF,
  });

  const actionSchemaType = {
    type: "String",
    otp: "Number"
  };

  const otpInput = new ActionSchema("verify-otp", actionSchemaType);

  const buildStrategy = new FIFOStrategy();

  const { state, actions, events } = await MicroRollup({
    config: stackrConfig,
    useState: counterFsm,
    useAction: otpInput,
    useBuilder: { strategy: buildStrategy, autorun: true },
    useSyncer: { autorun: true },
  });

  // events.action.onEvent(ActionEvents.SUBMIT_ACTION, (action) => {
  //   console.log("action submitted", action);
  // });

  // events.batcher.onEvent(BatcherEvents.BATCH_ACTION, (batch) => {
  //   console.log("action batched", batch);
  // });

  // events.builder.onEvent(BuilderEvents.ORDER_BATCH, (batch) => {
  //   console.log("action batch ordered", batch);
  // });

  return { actions, state };
};

const app = express();
app.use(bodyParser.json());
const { actions, state } = await rollup();
app.use(cors());

// import { keccak256, toUtf8Bytes } from 'ethers/lib/utils';

function generateOTP(seed: string, userAddress: string): string {
  const now = Date.now();
  const roundedTimestamp = Math.floor(now / (5 * 60 * 1000)); 
  const combinedData = seed + userAddress + Math.floor(roundedTimestamp).toString(); // Floor to the last 5 minutes

  // Hash the combined data to generate OTP
  // const otp = combinedData; // Take first 6 characters
  console.log(combinedData);
  const hmac = crypto.createHmac('sha256', combinedData);
  const otp = hmac.update('OTP').digest('hex').substring(0, 6);

  return otp;
}

app.get("/", (req: Request, res: Response) => {
  const commonSeed = 'hola';
  const commonSeed2 = 'hey';

  const otpDevice1 = generateOTP(commonSeed + 'Device1',"0x0");
  const otpDevice2 = generateOTP(commonSeed2 + 'Device2',"0x1");
  console.log('OTP for Device 1:', otpDevice1);
  console.log('OTP for Device 2:', otpDevice2);
  console.log(Date.now());
  res.send({ currentOtp: state.get().state.getState() });

});

var email;

app.post("/mail", async (req: Request, res: Response) => {
  email = req.body.email;
  console.log(email);
  res.status(201).send({ email });
});

app.post("/verify", async (req: Request, res: Response) => {
  const verifyRequest = req.body.verifyRequest;
  console.log(verifyRequest);
  const schema = actions.getSchema("verify-otp");

  if (!schema) {
    res.status(400).send({ message: "error" });
    return;
  }
  
  try {
    const newAction = schema.newAction(verifyRequest);
    const ack = await actions.submit(newAction);
    res.status(201).send({ ack });
  } catch (e: any) {
    res.status(400).send({ error: e.message });
  }
  res.status(201).send({ verifyRequest });
});



app.post("/", async (req: Request, res: Response) => {
  const schema = actions.getSchema("verify-otp");

  if (!schema) {
    res.status(400).send({ message: "error" });
    return;
  }

  try {
    const newAction = schema.newAction(req.body);
    const ack = await actions.submit(newAction);
    res.status(201).send({ ack });
  } catch (e: any) {
    res.status(400).send({ error: e.message });
  }
});

app.listen(3000, () => {
  console.log("listening on port 3000");
});

// actionEventsEmitter.on(ActionEvents.SUBMIT_ACTION, (data) => {
//   console.log("submit_action - Event triggered : ", data.payload);
// });

// executorEventsEmitter.on(ExecutorEvents.EXECUTE_SINGLE, (data) => {
//   console.log("execute_single - Event triggered : ", data);
// });
